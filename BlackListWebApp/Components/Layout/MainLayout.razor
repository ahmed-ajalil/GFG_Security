@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject IAuthorizationService AuthorizationService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="main-container">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light sticky-top">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="fas fa-shield-alt me-2"></i>
                BlackList Manager
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" 
                    aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">
                            <i class="fas fa-tachometer-alt me-1"></i>
                            Dashboard
                        </a>
                    </li>
                    
                    <!-- Black List Dropdown -->
                    <AuthorizeView Policy="AllUsers">
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="blacklistDropdown" role="button"
                               data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-user-slash me-1"></i>
                                Black List
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="blacklistDropdown">
                                <li>
                                    <a class="dropdown-item @(isAdmin ? "" : "d-none")" href="/manage">
                                        <i class="fas fa-users-cog me-2"></i>
                                        Manage Blacklist
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="/details">
                                        <i class="fas fa-info-circle me-2"></i>
                                        Blacklist Details
                                    </a>
                                </li>
                            </ul>
                        </li>
                    </AuthorizeView>
                    
                    
                    <!-- Non-Visa Dropdown -->
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" id="nonVisaDropdown" role="button" 
                           data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="fas fa-passport me-1"></i>
                            Non-Visa
                        </a>
                        <ul class="dropdown-menu" aria-labelledby="nonVisaDropdown">
                            <li class="@(isAdmin ? "" : "d-none")">
                                <a class="dropdown-item" href="/non-visa/add">
                                    <i class="fas fa-user-plus me-2"></i>
                                    Add Passengers
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="/non-visa/list">
                                    <i class="fas fa-list me-2"></i>
                                    Non-Visa List
                                </a>
                            </li>
                        </ul>
                    </li>
                </ul>
                <AuthorizeView>
                    <Authorized>
                        <div class="nav-item px-3">
                            <NavLink class="nav-link" href="MicrosoftIdentity/Account/SignOut">
                                <span class="bi bi-box-arrow-right-nav-menu" aria-hidden="true"></span> Sign Out
                            </NavLink>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container py-4">
        @Body
    </main>

    <!-- Footer -->
    <footer class="mt-5 py-4 border-top">
        <div class="container text-center">
            <div class="row">
                <div class="col-md-12">
                    <p class="mb-0 text-muted small">
                        &copy; @DateTime.Now.Year BlackList Management System. All rights reserved.
                    </p>
                </div>
            </div>
        </div>
    </footer>
</div>

<div id="blazor-error-ui" class="alert alert-danger" role="alert">
    <i class="fas fa-exclamation-triangle me-2"></i>
    An unhandled error has occurred.
    <a href="" class="reload btn btn-outline-light btn-sm ms-2">
        <i class="fas fa-redo me-1"></i>Reload
    </a>
    <a class="dismiss btn btn-outline-light btn-sm ms-1">
        <i class="fas fa-times"></i>
    </a>
</div>

@code {
    private bool canManageBlacklist = false;
    private bool canViewReports = false;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        // Get the current user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if the user satisfies the "AdminsOnly" policy
        var adminsOnlyResult = await AuthorizationService.AuthorizeAsync(user, "AdminsOnly");
        if (adminsOnlyResult.Succeeded)
        {
            canManageBlacklist = true;
        }

        // Check if the user satisfies the "CanViewReports" policy
        // (Assuming you have this policy defined)
        var reportsResult = await AuthorizationService.AuthorizeAsync(user, "DevelopersOnly");
        if (reportsResult.Succeeded)
        {
            canViewReports = true;
        }
        await CheckAdminRole();
    }

    private async Task CheckAdminRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var adminsOnlyResult = await AuthorizationService.AuthorizeAsync(user, "AdminsOnly");
        var developersOnlyResult = await AuthorizationService.AuthorizeAsync(user, "DevelopersOnly");
        isAdmin = adminsOnlyResult.Succeeded || developersOnlyResult.Succeeded;
    }
}