@page "/non-visa/list"
@rendermode InteractiveServer
@using BlackListWebApp.Interfaces
@using BlackListWebApp.Models
@inject INonVisaService NonVisaService
@inject NavigationManager NavigationManager

<PageTitle>Visa Violations Registry - BlackList Management</PageTitle>

<div class="fade-in">
    <div class="container">
        <!-- Standardized Page Header -->
        <div class="page-header mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="page-title">
                        <i class="fas fa-exclamation-triangle me-3"></i>
                        Visa Violations Registry
                    </h1>
                    <p class="page-subtitle">Track and manage passengers who violated visa requirements</p>
                </div>
                <div>
                    <button @onclick='() => NavigationManager.NavigateTo("/non-visa/add")' class="btn btn-danger">
                        <i class="fas fa-plus me-2"></i>
                        Record New Violation
                    </button>
                </div>
            </div>
        </div>

        <!-- Status Message -->
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert @statusClass alert-dismissible fade show" role="alert">
                <i class="fas @statusIcon me-2"></i>
                @statusMessage
                <button type="button" class="btn-close" @onclick='() => statusMessage = ""' aria-label="Close"></button>
            </div>
        }

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card danger h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">Total</h6>
                                <h2 class="mb-0 fw-bold">@totalPassengers</h2>
                                <p class="mb-0 opacity-75">Violations</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-exclamation-triangle"></i></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card warning h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">Today</h6>
                                <h2 class="mb-0 fw-bold">@todayArrivals</h2>
                                <p class="mb-0 opacity-75">New Violations</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-calendar-day"></i></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card info h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">This Week</h6>
                                <h2 class="mb-0 fw-bold">@weekArrivals</h2>
                                <p class="mb-0 opacity-75">Weekly Violations</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-calendar-week"></i></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card secondary h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">@mostCommonViolationType</h6>
                                <h2 class="mb-0 fw-bold">@businessPassengers</h2>
                                <p class="mb-0 opacity-75">Most Common</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-ban"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter and Search -->
        <div class="card mb-4 slide-up">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-4">
                        <div class="search-container">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" class="form-control" placeholder="Search violations..."
                                   @bind="searchTerm" @oninput="OnSearchChanged" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" @bind="purposeFilter" @bind:after="FilterAndSortPassengers">
                            <option value="">All Violation Types</option>
                            <option value="No Visa">No Visa</option>
                            <option value="Expired Visa">Expired Visa</option>
                            <option value="Invalid Visa">Invalid Visa</option>
                            <option value="Wrong Visa Type">Wrong Visa Type</option>
                            <option value="Fake Visa">Fake Visa</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" @bind="sortBy" @bind:after="FilterAndSortPassengers">
                            <option value="arrivalDate">Sort by Arrival Date (Newest)</option>
                            <option value="name">Sort by Name (A-Z)</option>
                            <option value="nationality">Sort by Nationality (A-Z)</option>
                            <option value="purpose">Sort by Violation Type (A-Z)</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Passengers List -->
        <div class="card slide-up">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Visa Violations (@filteredPassengers.Count)
                </h5>
            </div>
            <div class="card-body p-0">
                @if (isLoading)
                {
                    <div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>
                }
                else if (filteredPassengers.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>Passenger</th>
                                    <th>Nationality</th>
                                    <th>Passport</th>
                                    <th>Flight Info</th>
                                    <th>Violation Type</th>
                                    <th>Airport Station</th>
                                    <th>Arrival Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var passenger in currentPagePassengers)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div>
                                                    <div class="fw-bold">@passenger.FullName</div>
                                                    <small class="text-muted">
                                                        <i class="fas fa-calendar-plus me-1"></i>
                                                        Registered: @passenger.CreatedDate.ToString("MMM dd, yyyy")
                                                    </small>
                                                </div>
                                            </div>
                                        </td>
                                        <td><span class="badge bg-light text-dark">@passenger.Nationality</span></td>
                                        <td><div class="fw-bold">@passenger.PassportNumber</div></td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(passenger.FlightNumber))
                                            {
                                                <div><strong>Flight:</strong> @passenger.FlightNumber</div>
                                            }
                                            else
                                            {
                                                <span class="text-muted">No flight info</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@GetViolationBadgeClass(passenger.ViolationType)">@passenger.ViolationType</span>
                                        </td>
                                        <td><span class="badge bg-light text-dark">@passenger.AirportStation</span></td>
                                        <td>@passenger.ArrivalDate.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <div class="btn-group" role="group" aria-label="Actions">
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewPassenger(passenger)" title="View Details"><i class="fas fa-eye"></i></button>
                                                <button class="btn btn-sm btn-outline-warning" @onclick="() => EditPassenger(passenger)" title="Edit"><i class="fas fa-edit"></i></button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(passenger)" title="Delete"><i class="fas fa-trash"></i></button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (totalPages > 1)
                    {
                        <div class="card-footer">
                            <nav aria-label="Pagination">
                                <ul class="pagination justify-content-center mb-0">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)"><i class="fas fa-chevron-left"></i></button>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        var pageNumber = i;
                                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)"><i class="fas fa-chevron-right"></i></button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-passport fs-1 text-muted mb-3"></i>
                        <h5 class="text-muted">No passengers found</h5>
                        <p class="text-muted">
                            @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(purposeFilter))
                            {
                                <span>No non-visa passengers registered yet.</span>
                            }
                            else
                            {
                                <span>Try adjusting your search or filter criteria.</span>
                            }
                        </p>
                        <a href="/non-visa/add" class="btn btn-primary mt-3">
                            <i class="fas fa-plus me-2"></i>
                            Add First Passenger
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    // --- Data Lists ---
    private List<NonVisaPassenger> allPassengers = new();
    private List<NonVisaPassenger> filteredPassengers = new();
    private List<NonVisaPassenger> currentPagePassengers = new();

    // --- UI State & Filters ---
    private string searchTerm = string.Empty;
    private string purposeFilter = string.Empty;
    private string sortBy = "arrivalDate";
    private bool isLoading = true;

    // --- Statistics ---
    private int totalPassengers;
    private int todayArrivals;
    private int weekArrivals;
    private int businessPassengers; // Represents count for the most common violation
    private string mostCommonViolationType = "N/A";

    // --- Pagination ---
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => filteredPassengers.Any() ? (int)Math.Ceiling((double)filteredPassengers.Count / pageSize) : 0;

    // --- Status Message ---
    private string statusMessage = string.Empty;
    private string statusClass = string.Empty;
    private string statusIcon = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataFromServer();
    }

    private async Task LoadDataFromServer()
    {
        isLoading = true;
        allPassengers = await NonVisaService.GetAllPassengersAsync();
        await CalculateStatistics();
        FilterAndSortPassengers();
        isLoading = false;
    }

    private async Task CalculateStatistics()
    {
        totalPassengers = await NonVisaService.GetTotalCountAsync();
        todayArrivals = await NonVisaService.GetTodayCountAsync();
        weekArrivals = await NonVisaService.GetWeekCountAsync();
        var common = await NonVisaService.GetMostCommonViolationAsync();
        mostCommonViolationType = common.Type ?? "N/A";
        businessPassengers = common.Count;
    }

    private void FilterAndSortPassengers()
    {
        var filtered = allPassengers.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(p =>
                (p.FullName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.Nationality?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.PassportNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.ViolationType?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.AirportStation?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (p.FlightNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
        }

        if (!string.IsNullOrEmpty(purposeFilter))
        {
            filtered = filtered.Where(p => p.ViolationType == purposeFilter);
        }

        filtered = sortBy switch
        {
            "name" => filtered.OrderBy(p => p.FullName),
            "nationality" => filtered.OrderBy(p => p.Nationality),
            "purpose" => filtered.OrderBy(p => p.ViolationType),
            _ => filtered.OrderByDescending(p => p.ArrivalDate)
        };

        filteredPassengers = filtered.ToList();
        currentPage = 1;
        UpdateCurrentPagePassengers();
    }

    private void UpdateCurrentPagePassengers()
    {
        var skip = (currentPage - 1) * pageSize;
        currentPagePassengers = filteredPassengers.Skip(skip).Take(pageSize).ToList();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterAndSortPassengers();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            UpdateCurrentPagePassengers();
        }
    }

    private string GetViolationBadgeClass(string violationType)
    {
        return violationType switch
        {
            "No Visa" => "danger",
            "Expired Visa" => "warning",
            "Invalid Visa" => "secondary",
            "Wrong Visa Type" => "info",
            "Fake Visa" => "dark",
            _ => "light text-dark"
        };
    }

    private void ViewPassenger(NonVisaPassenger passenger)
    {
        NavigationManager.NavigateTo($"/non-visa/details/{passenger.Id}");
    }

    private void EditPassenger(NonVisaPassenger passenger)
    {
        NavigationManager.NavigateTo($"/non-visa/edit/{passenger.Id}");
    }

    private async Task ConfirmDelete(NonVisaPassenger passenger)
    {
        var success = await NonVisaService.DeletePassengerAsync(passenger.Id);
        if (success)
        {
            ShowStatusMessage($"Violation record for {passenger.FullName} deleted successfully.", "alert-success", "fa-check-circle");
            await LoadDataFromServer();
        }
        else
        {
            ShowStatusMessage($"Error deleting record for {passenger.FullName}.", "alert-danger", "fa-exclamation-triangle");
        }
    }

    private void ShowStatusMessage(string message, string cssClass, string icon)
    {
        statusMessage = message;
        statusClass = cssClass;
        statusIcon = icon;
        StateHasChanged();

        _ = Task.Delay(4000).ContinueWith(_ =>
        {
            statusMessage = string.Empty;
            InvokeAsync(StateHasChanged);
        });
    }
}