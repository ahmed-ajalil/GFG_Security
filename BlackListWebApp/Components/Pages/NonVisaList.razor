@page "/non-visa/list"
@rendermode InteractiveServer
@implements IDisposable
@using BlackListWebApp.Interfaces
@using BlackListWebApp.Models
@inject INonVisaService NonVisaService

<PageTitle>Visa Violations Registry - BlackList Management</PageTitle>

<div class="fade-in">
    <div class="container">
        <!-- Page Header -->
        <div class="page-header mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="page-title"><i class="fas fa-exclamation-triangle me-3"></i>Visa Violations Registry</h1>
                    <p class="page-subtitle">Track and manage passengers who violated visa requirements</p>
                </div>
                @* <button @onclick="ShowAddModal" class="btn btn-danger"><i class="fas fa-plus me-2"></i>Record New Violation</button> *@
                <a href="/non-visa/add" class="btn btn-danger"><i class="fas fa-plus me-2"></i>Record New Violation</a>
            </div>
        </div>

        <!-- Status Message -->
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert @statusClass alert-dismissible fade show" role="alert">
                <i class="fas @statusIcon me-2"></i> @statusMessage
                <button type="button" class="btn-close" @onclick='() => statusMessage = ""' aria-label="Close"></button>
            </div>
        }

        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card danger h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">Total</h6>
                                <h2 class="mb-0 fw-bold">@totalPassengers</h2>
                                <p class="mb-0 opacity-75">Violations</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-exclamation-triangle"></i></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card warning h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">Today</h6>
                                <h2 class="mb-0 fw-bold">@todayArrivals</h2>
                                <p class="mb-0 opacity-75">New Violations</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-calendar-day"></i></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card info h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">This Week</h6>
                                <h2 class="mb-0 fw-bold">@weekArrivals</h2>
                                <p class="mb-0 opacity-75">Weekly Violations</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-calendar-week"></i></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card stats-card secondary h-100">
                    <div class="card-body text-center">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="card-title text-uppercase mb-1">@mostCommonViolationType</h6>
                                <h2 class="mb-0 fw-bold">@mostCommonViolationCount</h2>
                                <p class="mb-0 opacity-75">Most Common</p>
                            </div>
                            <div class="fs-1 opacity-50"><i class="fas fa-ban"></i></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Filter and Search -->
        <div class="card mb-4 slide-up">
            <div class="card-body">
                <div class="row g-3 align-items-center">
                    <div class="col-md-5">
                        <div class="search-container">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" class="form-control" placeholder="Search by name, passport, flight..."
                                   value="@searchTerm" @oninput="OnSearchChanged" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" @onchange="OnFilterChanged">
                            <option value="">All Violation Types</option>
                            <option value="No Visa">No Visa</option>
                            <option value="Expired Visa">Expired Visa</option>
                            <option value="Invalid Visa">Invalid Visa</option>
                            <option value="Wrong Visa Type">Wrong Visa Type</option>
                            <option value="Fake Visa">Fake Visa</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" @onchange="OnSortChanged">
                            <option value="arrivalDate">Sort by Arrival Date</option>
                            <option value="name">Sort by Name</option>
                            <option value="nationality">Sort by Nationality</option>
                            <option value="violationType">Sort by Violation Type</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

        <!-- Passengers List -->
        <div class="card slide-up">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Violation Records (@filteredPassengers.Count)
                </h5>
            </div>
            <div class="card-body p-0">
                @if (isLoading)
                {
                    <div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>
                }
                else if (currentPagePassengers.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead>
                                <tr>
                                    <th>Passenger</th>
                                    <th>Passport / Nationality</th>
                                    <th>Flight Info</th>
                                    <th>Violation</th>
                                    <th>Arrival Date</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var passenger in currentPagePassengers)
                                {
                                    <tr>
                                        <td>
                                            <div class="fw-bold">@passenger.FullName</div>
                                            <small class="text-muted">ID: #@passenger.Id</small>
                                        </td>
                                        <td>
                                            <div class="fw-bold">@passenger.PassportNumber</div>
                                            <small class="text-muted">@passenger.Nationality</small>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(passenger.FlightNumber))
                                            {
                                                <div>@passenger.FlightNumber</div>
                                                <small class="text-muted">@passenger.AirportStation</small>
                                            }
                                            else
                                            {
                                                <span class="text-muted">@passenger.AirportStation</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@GetViolationBadgeClass(passenger.ViolationType)">@passenger.ViolationType</span>
                                        </td>
                                        <td>@passenger.ArrivalDate.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <button class="btn btn-sm btn-ghost" @onclick="() => ViewPassenger(passenger)" title="View Details"><i class="fas fa-eye"></i></button>
                                                <button class="btn btn-sm btn-outline-secondary" @onclick="() => EditPassenger(passenger)" title="Edit"><i class="fas fa-edit"></i></button>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(passenger)" title="Delete"><i class="fas fa-trash"></i></button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (totalPages > 1)
                    {
                        <div class="card-footer">
                            <nav aria-label="Pagination">
                                <ul class="pagination justify-content-center mb-0">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)"><i class="fas fa-chevron-left"></i></button>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        var pageNumber = i;
                                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == totalPages)"><i class="fas fa-chevron-right"></i></button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-passport fs-1 text-muted mb-3"></i>
                        <h5 class="text-muted">No Violation Records Found</h5>
                        <p class="text-muted">
                            @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(violationTypeFilter))
                            {
                                <span>Click the button below to record the first violation.</span>
                            }
                            else
                            {
                                <span>Try adjusting your search or filter criteria.</span>
                            }
                        </p>
                        @* <button @onclick="ShowAddModal" class="btn btn-danger mt-3">
                            <i class="fas fa-plus me-2"></i>
                            Record New Violation
                        </button> *@
                        <a href="/non-visa/add" class="btn btn-danger"><i class="fas fa-plus me-2"></i>Record New Violation</a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Modal -->
@if (showAddEditModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas @(isEditMode ? "fa-edit" : "fa-plus") me-2"></i>
                        @(isEditMode ? "Edit Violation Record" : "Record New Violation")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseAddEditModal" aria-label="Close"></button>
                </div>
                <EditForm Model="currentPassenger" OnValidSubmit="SavePassenger">
                    <DataAnnotationsValidator />
                    <div class="modal-body">
                        <h6 class="text-muted fw-bold mb-3">Passenger Information</h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">First Name *</label>
                                <InputText @bind-Value="currentPassenger.FirstName" class="form-control" />
                                <ValidationMessage For="@(() => currentPassenger.FirstName)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Last Name *</label>
                                <InputText @bind-Value="currentPassenger.LastName" class="form-control" />
                                <ValidationMessage For="@(() => currentPassenger.LastName)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Nationality</label>
                                <InputText @bind-Value="currentPassenger.Nationality" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Passport Number</label>
                                <InputText @bind-Value="currentPassenger.PassportNumber" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">PNR (Booking Ref)</label>
                                <InputText @bind-Value="currentPassenger.PNR" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Mobile</label>
                                <InputText @bind-Value="currentPassenger.Mobile" class="form-control" />
                            </div>
                        </div>

                        <hr class="my-4" />
                        <h6 class="text-muted fw-bold mb-3">Violation Details</h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Flight Number</label>
                                <InputText @bind-Value="currentPassenger.FlightNumber" class="form-control" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Airport Station *</label>
                                <InputText @bind-Value="currentPassenger.AirportStation" class="form-control" />
                                <ValidationMessage For="@(() => currentPassenger.AirportStation)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Arrival Date *</label>
                                <InputDate @bind-Value="currentPassenger.ArrivalDate" class="form-control" />
                                <ValidationMessage For="@(() => currentPassenger.ArrivalDate)" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Violation Type *</label>
                                <InputSelect @bind-Value="currentPassenger.ViolationType" class="form-select">
                                    <option value="">Select a type...</option>
                                    <option value="No Visa">No Visa</option>
                                    <option value="Expired Visa">Expired Visa</option>
                                    <option value="Invalid Visa">Invalid Visa</option>
                                    <option value="Wrong Visa Type">Wrong Visa Type</option>
                                    <option value="Fake Visa">Fake Visa</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => currentPassenger.ViolationType)" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Purpose of Entry</label>
                                <InputTextArea @bind-Value="currentPassenger.Purpose" class="form-control" rows="2" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Remarks</label>
                                <InputTextArea @bind-Value="currentPassenger.Remarks" class="form-control" rows="2" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-outline-secondary" @onclick="CloseAddEditModal">Cancel</button>
                        <button type="submit" class="btn btn-danger">
                            <i class="fas @(isEditMode ? "fa-save" : "fa-plus") me-2"></i>
                            @(isEditMode ? "Save Changes" : "Record Violation")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<!-- View Details Modal -->
@if (selectedPassenger != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-user-check me-2"></i>Violation Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseViewModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between align-items-start mb-3">
                        <div>
                            <h4 class="text-danger mb-0">@selectedPassenger.FullName</h4>
                            <p class="text-muted mb-0">Record ID: #@selectedPassenger.Id | Registered: @selectedPassenger.CreatedDate.ToString("MMM dd, yyyy")</p>
                        </div>
                        <span class="badge fs-6 bg-@GetViolationBadgeClass(selectedPassenger.ViolationType)">@selectedPassenger.ViolationType</span>
                    </div>

                    <h6 class="text-muted fw-bold mt-4 mb-2">Passenger Information</h6>
                    <div class="row g-3">
                        <div class="col-md-6"><label class="fw-bold d-block">Nationality</label> @selectedPassenger.Nationality</div>
                        <div class="col-md-6"><label class="fw-bold d-block">Passport</label> @selectedPassenger.PassportNumber</div>
                        <div class="col-md-6"><label class="fw-bold d-block">Mobile</label> @selectedPassenger.Mobile</div>
                        <div class="col-md-6"><label class="fw-bold d-block">PNR</label> @selectedPassenger.PNR</div>
                    </div>

                    <h6 class="text-muted fw-bold mt-4 mb-2">Violation Information</h6>
                    <div class="row g-3">
                        <div class="col-md-6"><label class="fw-bold d-block">Flight Number</label> @selectedPassenger.FlightNumber</div>
                        <div class="col-md-6"><label class="fw-bold d-block">Airport Station</label> @selectedPassenger.AirportStation</div>
                        <div class="col-md-6"><label class="fw-bold d-block">Arrival Date</label> @selectedPassenger.ArrivalDate.ToString("MMMM dd, yyyy")</div>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(selectedPassenger.Purpose))
                    {
                        <div class="mt-3"><label class="fw-bold d-block">Purpose of Entry</label><div class="p-2 bg-light rounded border">@selectedPassenger.Purpose</div></div>
                    }
                    @if (!string.IsNullOrWhiteSpace(selectedPassenger.Remarks))
                    {
                        <div class="mt-3"><label class="fw-bold d-block">Remarks</label><div class="p-2 bg-light rounded border">@selectedPassenger.Remarks</div></div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseViewModal">Close</button>
                    <button type="button" class="btn btn-primary" @onclick="() => EditPassenger(selectedPassenger)">
                        <i class="fas fa-edit me-2"></i>Edit
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (passengerToDelete != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger"><i class="fas fa-exclamation-triangle me-2"></i>Confirm Deletion</h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete the violation record for <strong>@passengerToDelete.FullName</strong>?</p>
                    <p class="text-muted small">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" @onclick="CloseDeleteModal">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeletePassengerConfirmed"><i class="fas fa-trash me-2"></i>Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // --- Data & State ---
    private List<NonVisaPassenger> filteredPassengers = new();
    private List<NonVisaPassenger> currentPagePassengers = new();
    private NonVisaPassenger currentPassenger = new();
    private NonVisaPassenger? selectedPassenger;
    private NonVisaPassenger? passengerToDelete;

    // --- UI & Modals ---
    private bool isLoading = true;
    private bool showAddEditModal = false;
    private bool isEditMode = false;
    private string statusMessage = "", statusClass = "", statusIcon = "";

    // --- Filtering & Sorting ---
    private string searchTerm = string.Empty;
    private string violationTypeFilter = string.Empty;
    private string sortBy = "arrivalDate";

    // --- Debouncing for Search ---
    private CancellationTokenSource _searchCancellationTokenSource = new();

    // --- Statistics ---
    private int totalPassengers, todayArrivals, weekArrivals, mostCommonViolationCount;
    private string mostCommonViolationType = "N/A";

    // --- Pagination ---
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredPassengers.Count / pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await CalculateStatistics(); // Calculate once on load
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            filteredPassengers = await NonVisaService.GetFilteredPassengersAsync(searchTerm, violationTypeFilter, sortBy);
        }
        catch (Exception ex)
        {
            // Catch potential errors from the service and display them
            ShowStatusMessage($"An error occurred while loading data: {ex.Message}", "alert-danger", "fa-exclamation-triangle");
            filteredPassengers = new List<NonVisaPassenger>(); // Clear list on error
        }
        finally
        {
            isLoading = false;
            GoToPage(1); // Reset to first page after any filter/sort change
            StateHasChanged();
        }
    }

    private async Task CalculateStatistics()
    {
        totalPassengers = await NonVisaService.GetTotalCountAsync();
        todayArrivals = await NonVisaService.GetTodayCountAsync();
        weekArrivals = await NonVisaService.GetWeekCountAsync();
        var common = await NonVisaService.GetMostCommonViolationAsync();
        mostCommonViolationType = common.Type ?? "N/A";
        mostCommonViolationCount = common.Count;
    }

    // --- Event Handlers for Filtering ---
    private async Task OnSearchChanged(ChangeEventArgs e)
{
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Cancel any previously scheduled search
        _searchCancellationTokenSource.Cancel();
        _searchCancellationTokenSource = new CancellationTokenSource();

        try
        {
            // Wait for 300ms of inactivity before starting the search
            await Task.Delay(300, _searchCancellationTokenSource.Token);

            // If the delay completes without cancellation, execute the search
            await LoadData();
        }
        catch (TaskCanceledException)
        {
            // This is expected if the user continues typing. We do nothing.
        }
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        violationTypeFilter = e.Value?.ToString() ?? string.Empty;
        await LoadData();
    }

    private async Task OnSortChanged(ChangeEventArgs e)
    {
        sortBy = e.Value?.ToString() ?? "arrivalDate";
        await LoadData();
    }

    // --- Modal Control ---
    private void ShowAddModal()
    {
        currentPassenger = new NonVisaPassenger { ArrivalDate = DateTime.UtcNow.Date, Status = "Pending"};
        isEditMode = false;
        showAddEditModal = true;
    }

    private void EditPassenger(NonVisaPassenger passenger)
    {
        // Close view modal if it's open
        selectedPassenger = null;

        // Deep copy to avoid modifying the list item directly
        currentPassenger = new NonVisaPassenger
        {
            Id = passenger.Id,
            FirstName = passenger.FirstName,
            LastName = passenger.LastName,
            Nationality = passenger.Nationality,
            PNR = passenger.PNR,
            PassportNumber = passenger.PassportNumber,
            Mobile = passenger.Mobile,
            FlightNumber = passenger.FlightNumber,
            ArrivalDate = passenger.ArrivalDate,
            AirportStation = passenger.AirportStation,
            ViolationType = passenger.ViolationType,
            Purpose = passenger.Purpose,
            Remarks = passenger.Remarks,
            CreatedDate = passenger.CreatedDate,
            Status = passenger.Status
        };
        isEditMode = true;
        showAddEditModal = true;
    }

    private void ViewPassenger(NonVisaPassenger passenger)
    {
        selectedPassenger = passenger;
    }

    private void ShowDeleteConfirmation(NonVisaPassenger passenger)
    {
        passengerToDelete = passenger;
    }

    private void CloseAddEditModal() => showAddEditModal = false;
    private void CloseViewModal() => selectedPassenger = null;
    private void CloseDeleteModal() => passengerToDelete = null;

    // --- CRUD Operations ---
    private async Task SavePassenger()
    {
        if (isEditMode)
        {
            await NonVisaService.UpdatePassengerAsync(currentPassenger);
            ShowStatusMessage($"Record for {currentPassenger.FullName} updated.", "alert-success", "fa-check-circle");
        }
        else
        {
            // Set a default status for new records
            currentPassenger.Status = "Pending";
            await NonVisaService.AddPassengerAsync(currentPassenger);
            ShowStatusMessage($"New violation for {currentPassenger.FullName} recorded.", "alert-success", "fa-plus-circle");
        }
        CloseAddEditModal();
        await LoadData();
        await CalculateStatistics(); // Recalculate stats after add/edit
    }

    private async Task DeletePassengerConfirmed()
    {
        if (passengerToDelete == null) return;

        await NonVisaService.DeletePassengerAsync(passengerToDelete.Id);
        ShowStatusMessage($"Record for {passengerToDelete.FullName} deleted.", "alert-success", "fa-trash");

        var tempPassenger = passengerToDelete; // Store before closing modal
        CloseDeleteModal();
        await LoadData();
        await CalculateStatistics(); // Recalculate stats after delete
    }

    // --- Pagination & UI Helpers ---
    private void GoToPage(int page)
    {
        if ((page >= 1 && page <= totalPages) || totalPages == 0)
        {
            currentPage = page;
            var skip = (currentPage - 1) * pageSize;
            currentPagePassengers = filteredPassengers.Skip(skip).Take(pageSize).ToList();
        }
    }

    private string GetViolationBadgeClass(string violationType) => violationType switch
    {
        "No Visa" => "danger",
        "Expired Visa" => "warning",
        "Invalid Visa" => "secondary",
        "Wrong Visa Type" => "info",
        "Fake Visa" => "dark",
        _ => "light text-dark"
    };

    private void ShowStatusMessage(string message, string cssClass, string icon)
    {
        statusMessage = message; statusClass = cssClass; statusIcon = icon;
        StateHasChanged();

        if (cssClass.Contains("success"))
        {
            _ = Task.Delay(5000).ContinueWith(_ => { statusMessage = ""; InvokeAsync(StateHasChanged); });
        }
    }

    public void Dispose()
    {
        _searchCancellationTokenSource.Cancel();
        _searchCancellationTokenSource.Dispose();
    }
}